{"version":3,"sources":["Homepage.js","component/LoginForm.js","Loginpage.js","Mainpage.js","Logoutpage.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","children","NormalLoginForm","handleSubmit","e","preventDefault","form","validateFields","err","values","console","log","getFieldDecorator","this","onSubmit","className","Item","rules","required","message","prefix","type","style","color","placeholder","valuePropName","initialValue","href","htmlType","Component","LoginForm","create","name","Login","Main","Logout","WrapperLayout","exact","path","component","App","to","pathname","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAWeA,MATf,SAAcC,GACZ,OACE,6BACE,8CACCA,EAAMC,W,kICFPC,E,2MACJC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKL,MAAMM,KAAKC,gBAAe,SAACC,EAAKC,GAC9BD,GACHE,QAAQC,IAAI,4BAA6BF,O,wEAKrC,IACAG,EAAsBC,KAAKb,MAAMM,KAAjCM,kBACR,OACE,uBAAME,SAAUD,KAAKV,aAAcY,UAAU,cAC3C,sBAAMC,KAAN,KACGJ,EAAkB,WAAY,CAC7BK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCP,CAGC,uBACEQ,OAAQ,uBAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAC1CC,YAAY,eAIlB,sBAAMR,KAAN,KACGJ,EAAkB,WAAY,CAC7BK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADpCP,CAGC,uBACEQ,OAAQ,uBAAMC,KAAK,OAAOC,MAAO,CAAEC,MAAO,qBAC1CF,KAAK,WACLG,YAAY,eAIlB,sBAAMR,KAAN,KACGJ,EAAkB,WAAY,CAC7Ba,cAAe,UACfC,cAAc,GAFfd,CAGE,2CACH,uBAAGG,UAAU,oBAAoBY,KAAK,IAAtC,mBAGA,uBACEN,KAAK,UACLO,SAAS,SACTb,UAAU,qBAHZ,UARF,MAeK,uBAAGY,KAAK,IAAR,uB,GAlDiBE,aA2DfC,EAFG,IAAKC,OAAO,CAAEC,KAAM,gBAApB,CAAsC9B,GCjDzC+B,MATf,SAAejC,GACb,OACE,6BACE,0CACA,kBAAC,EAAD,QCGSkC,MARf,SAAclC,GACZ,OACE,6BACE,gDCKSmC,MARf,SAAgBnC,GACd,OACE,6BACE,6CCEN,SAASoC,IACP,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,cAAeC,UAAWN,IAC7C,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAM,aAAcC,UAAWL,IAC5C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAM,eAAgBC,UAAWJ,KAerCK,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOF,KAAM,QAASC,UAAWH,IACjC,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAM,KACjB,kBAAC,IAAD,CAAUG,GAAI,CAAEC,SAAU,cCTdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.87625377.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div>\r\n      <h1>User home page</h1>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nimport { Form, Icon, Input, Button, Checkbox } from \"antd\";\r\n\r\nclass NormalLoginForm extends Component {\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.props.form.validateFields((err, values) => {\r\n      if (!err) {\r\n        console.log(\"Received values of form: \", values);\r\n      }\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { getFieldDecorator } = this.props.form;\r\n    return (\r\n      <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n        <Form.Item>\r\n          {getFieldDecorator(\"username\", {\r\n            rules: [{ required: true, message: \"Please input your username!\" }]\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"user\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n              placeholder=\"Username\"\r\n            />\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          {getFieldDecorator(\"password\", {\r\n            rules: [{ required: true, message: \"Please input your Password!\" }]\r\n          })(\r\n            <Input\r\n              prefix={<Icon type=\"lock\" style={{ color: \"rgba(0,0,0,.25)\" }} />}\r\n              type=\"password\"\r\n              placeholder=\"Password\"\r\n            />\r\n          )}\r\n        </Form.Item>\r\n        <Form.Item>\r\n          {getFieldDecorator(\"remember\", {\r\n            valuePropName: \"checked\",\r\n            initialValue: true\r\n          })(<Checkbox>Remember me</Checkbox>)}\r\n          <a className=\"login-form-forgot\" href=\"\">\r\n            Forgot password\r\n          </a>\r\n          <Button\r\n            type=\"primary\"\r\n            htmlType=\"submit\"\r\n            className=\"login-form-button\"\r\n          >\r\n            Log in\r\n          </Button>\r\n          Or <a href=\"\">register now!</a>\r\n        </Form.Item>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nconst LoginForm = Form.create({ name: \"normal_login\" })(NormalLoginForm);\r\n\r\nexport default LoginForm;\r\n","import React from \"react\";\r\nimport LoginForm from \"./component/LoginForm\";\r\n\r\nfunction Login(props) {\r\n  return (\r\n    <div>\r\n      <h2>Login page</h2>\r\n      <LoginForm />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\n\r\nfunction Main(props) {\r\n  return (\r\n    <div>\r\n      <h2>User Main page</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\n\r\nfunction Logout(props) {\r\n  return (\r\n    <div>\r\n      <h2>Logout page</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logout;\r\n","import React from \"react\";\nimport { BrowserRouter, Route, Redirect } from \"react-router-dom\";\nimport Home from \"./Homepage\";\nimport Login from \"./Loginpage\";\nimport Main from \"./Mainpage\";\nimport Logout from \"./Logoutpage\";\n\nfunction WrapperLayout() {\n  return (\n    <Home>\n      <Route exact path={\"/home/login\"} component={Login} />\n      <Route exact path={\"/home/main\"} component={Main} />\n      <Route exact path={\"/home/logout\"} component={Logout} />\n    </Home>\n  );\n}\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Route path={\"/home\"} component={WrapperLayout} />\n      <Route exact path={\"/\"}>\n        <Redirect to={{ pathname: \"/home\" }} />\n      </Route>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}